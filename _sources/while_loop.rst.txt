########
Un bucle
########

Com hem vist, el que ens cal és poder tornar a executar una línia que ja
hem executat.

En programació estructurada no està permès saltar d'una
instrucció a una altra.

Hi ha altres tipus de programació no estructurada que sí ho
permeten, mitjançant instruccions de salt que diuen *ves a
la línia 5* o en l'anglès compacte dels llenguatges de
programació ``goto 5``.

Al llarg dels anys, els desenvolupadors hem aprés d'una
manera molt dura que aquesta instrucció és un dels nostres
**diables**. El codi que genera acaba sent un malson quan
el volem entendre i corregir.

Si bé Python ofereix ``goto``, aquesta està molt està molt desaconsellat.
En aquest curs està **prohibida**.

.. important:: en aquest curs no s'accepta l'ús de ``goto``.

Si mai et trobes un codi amb ``goto`` … bé, avisa i pregarem
per la teva ànima.

Malgrat aquest salt cap enrere no el podrem fer, hi ha altres maneres
d'aconseguir el mateix efecte si ho *retoquem* retoquem una mica.  Per
exemple:

.. graphviz::
    :align: center

    digraph {
        inici[shape="box", style=rounded];
        instruccio0 [label="suma = 0", shape="rectangle", style=""];
        instruccio3 [label="escriu suma", shape="rectangle", style=""]
        lectura1 [label="valor = llegeix(\"un valor\")", shape="rectangle", style=""];
        lectura2 [label="valor = llegeix(\"un valor\")", shape="rectangle", style="", color="red"];
        condicio1 [label="valor >=0", shape="diamond", style=""];
        instruccio1 [label="suma = suma + valor", shape="rectangle", style=""]
        final[shape="box", style=rounded];

        inici -> instruccio0
        instruccio0 -> lectura1;
        lectura1 -> condicio1;
        condicio1 -> instruccio1 [label="cert"];
        condicio1 -> instruccio3 [label="fals"];
        instruccio1 -> lectura2 [color="red"];
        lectura2 -> condicio1 [color="red"];
        instruccio3 -> final;
    }



Deixa'm que ho torni a escriure amb altres paraules: el que volem en
realitat és anar llegint i sumant valors **mentre** ens introdueixin
valors positius. Aquí la paraula clau, evidentment, és el *mentre*
(*while* en anglès)

A veure que et sembla el següent codi

.. code-block:: python
    :linenos:

    """
        Programa que suma nombres positius consecutius, fins
        rebre un de negatiu
    """

    # creem la variable on guardarem el resultat de sumar
    suma = 0   # inicialment no hem sumat res i per tant és 0

    # demana el primer valor
    print("Introdueix valor")
    valor = int(input())

    # ves sumant mentre el valor sigui positiu
    while valor >= 0:
        suma = suma + valor
        # demana un nou valor
        print("Introdueix valor")
        valor = int(input())

    # mostrem el resultat
    print("La suma és", suma)

La clau està en la línia 14. Allà hi trobem que en comptes de ``if`` ara
apareix ``while``

El funcionament és el següent:

* comença llegint un primer valor (línia 11)

* tot seguit comprova si el valor llegit és positiu (línia 14)

  Tal i com funcionaria si hagués estat un ``if``, en cas que la condició
  resulti certa, entra dins del bloc i acumula el valor a la variable
  ``suma``.

* a continuació, demana un nou valor (línia 18), i, molt important…

* **torna** a comprovar si el valor llegit és positiu (línia 14)

* quan el valor deixi de ser positiu, el programa passarà a la línia 21, i
  continuarà fins el final.

Fixa't que l'estructura del ``while`` és pràcticament idèntica a la del
``if``.

.. code-block:: python

    if condicio:                      while condicio:
       instruccions                      instruccions


|exerciseicon__T| :doc:`exercici_03_03_sumanotes`
