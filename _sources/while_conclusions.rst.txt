####################################
Conclusions dels bucles condicionals
####################################

Hem vist moltes coses importants en aquesta secció. Permet-me un resum:

* la més obvia és la nova estructura ``while`` que ens permet executar un
  bloc d'instruccions repetidament *mentre* es compleixi una posició.

  Sabem que és important que dins del bucle es produeixin canvis que
  permetin en algun moment que la condició del bucle passi a ser falsa,
  altrament el programa es quedarà funcionant fins que l'avortem.

* *acumulador*: una variable que va acumulant els valors que van
  enregistrant-se durant l'execució del programa, sovint dins d'un
  bucle.

  El punt important és que sempre l'hem d'inicialitzar a un valor

  Es tracta d'un *patró de programació* molt habitual i el veurem sovint i
  amb diferents aspectes. De moment l'hem vist útil per sumar valors,
  comptar-los i trobar el màxim.

* duplicació de codi: quan tenim codi duplicat, els nostres programes
  costen més de modificar i és més fàcil introduir errors.

  A aquest problema també el coneixem com a *codi redundant* i més
  endavant veurem que és una de les raons per les quals voldrem disposar
  de quelcom més d'assignacions, condicionals i bucles per fer els nostres
  programes.

* Encara una cosa més: resoldre problemes per simplificació

  Es tracta d'una estratègia molt poderosa. Cada cop que et trobis amb un
  problema que no sàpigues ni per on agafar, una bona manera de
  començar-lo a atacar és plantejant-ne una versió simplificada.

  En l'exercici de la suma de positius tens un exemple de com funciona.
  Aprofita'l!

Per acabar, et deixo alguns exercicis addicionals per què practiquis els
nous coneixements d'aquest tema:

|exerciseicon__T| :doc:`exercici_03_05_lloro`

|exerciseicon__T| :doc:`exercici_03_06_trobamaxim`

|exerciseicon__T| :doc:`exercici_03_07_notamitja`

|exerciseicon__T| :doc:`exercici_03_08_endevina`

|exerciseicon__T| :doc:`exercici_03_09_endevinacancel`
